{"version":3,"file":"index.es.js","sources":["../src/prompt.js","../src/menu.js","../src/keymap.js","../src/inputrules.js","../src/index.js"],"sourcesContent":["const prefix = \"ProseMirror-prompt\"\n\nexport function openPrompt(options) {\n  let wrapper = document.body.appendChild(document.createElement(\"div\"))\n  wrapper.className = prefix\n\n  let mouseOutside = e => { if (!wrapper.contains(e.target)) close() }\n  setTimeout(() => window.addEventListener(\"mousedown\", mouseOutside), 50)\n  let close = () => {\n    window.removeEventListener(\"mousedown\", mouseOutside)\n    if (wrapper.parentNode) wrapper.parentNode.removeChild(wrapper)\n  }\n\n  let domFields = []\n  for (let name in options.fields) domFields.push(options.fields[name].render())\n\n  let submitButton = document.createElement(\"button\")\n  submitButton.type = \"submit\"\n  submitButton.className = prefix + \"-submit\"\n  submitButton.textContent = \"OK\"\n  let cancelButton = document.createElement(\"button\")\n  cancelButton.type = \"button\"\n  cancelButton.className = prefix + \"-cancel\"\n  cancelButton.textContent = \"Cancel\"\n  cancelButton.addEventListener(\"click\", close)\n\n  let form = wrapper.appendChild(document.createElement(\"form\"))\n  if (options.title) form.appendChild(document.createElement(\"h5\")).textContent = options.title\n  domFields.forEach(field => {\n    form.appendChild(document.createElement(\"div\")).appendChild(field)\n  })\n  let buttons = form.appendChild(document.createElement(\"div\"))\n  buttons.className = prefix + \"-buttons\"\n  buttons.appendChild(submitButton)\n  buttons.appendChild(document.createTextNode(\" \"))\n  buttons.appendChild(cancelButton)\n\n  let box = wrapper.getBoundingClientRect()\n  wrapper.style.top = ((window.innerHeight - box.height) / 2) + \"px\"\n  wrapper.style.left = ((window.innerWidth - box.width) / 2) + \"px\"\n\n  let submit = () => {\n    let params = getValues(options.fields, domFields)\n    if (params) {\n      close()\n      options.callback(params)\n    }\n  }\n\n  form.addEventListener(\"submit\", e => {\n    e.preventDefault()\n    submit()\n  })\n\n  form.addEventListener(\"keydown\", e => {\n    if (e.keyCode == 27) {\n      e.preventDefault()\n      close()\n    } else if (e.keyCode == 13 && !(e.ctrlKey || e.metaKey || e.shiftKey)) {\n      e.preventDefault()\n      submit()\n    } else if (e.keyCode == 9) {\n      window.setTimeout(() => {\n        if (!wrapper.contains(document.activeElement)) close()\n      }, 500)\n    }\n  })\n\n  let input = form.elements[0]\n  if (input) input.focus()\n}\n\nfunction getValues(fields, domFields) {\n  let result = Object.create(null), i = 0\n  for (let name in fields) {\n    let field = fields[name], dom = domFields[i++]\n    let value = field.read(dom), bad = field.validate(value)\n    if (bad) {\n      reportInvalid(dom, bad)\n      return null\n    }\n    result[name] = field.clean(value)\n  }\n  return result\n}\n\nfunction reportInvalid(dom, message) {\n  // FIXME this is awful and needs a lot more work\n  let parent = dom.parentNode\n  let msg = parent.appendChild(document.createElement(\"div\"))\n  msg.style.left = (dom.offsetLeft + dom.offsetWidth + 2) + \"px\"\n  msg.style.top = (dom.offsetTop - 5) + \"px\"\n  msg.className = \"ProseMirror-invalid\"\n  msg.textContent = message\n  setTimeout(() => parent.removeChild(msg), 1500)\n}\n\n// ::- The type of field that `FieldPrompt` expects to be passed to it.\nexport class Field {\n  // :: (Object)\n  // Create a field with the given options. Options support by all\n  // field types are:\n  //\n  // **`value`**`: ?any`\n  //   : The starting value for the field.\n  //\n  // **`label`**`: string`\n  //   : The label for the field.\n  //\n  // **`required`**`: ?bool`\n  //   : Whether the field is required.\n  //\n  // **`validate`**`: ?(any) → ?string`\n  //   : A function to validate the given value. Should return an\n  //     error message if it is not valid.\n  constructor(options) { this.options = options }\n\n  // render:: (state: EditorState, props: Object) → dom.Node\n  // Render the field to the DOM. Should be implemented by all subclasses.\n\n  // :: (dom.Node) → any\n  // Read the field's value from its DOM node.\n  read(dom) { return dom.value }\n\n  // :: (any) → ?string\n  // A field-type-specific validation function.\n  validateType(_value) {}\n\n  validate(value) {\n    if (!value && this.options.required)\n      return \"Required field\"\n    return this.validateType(value) || (this.options.validate && this.options.validate(value))\n  }\n\n  clean(value) {\n    return this.options.clean ? this.options.clean(value) : value\n  }\n}\n\n// ::- A field class for single-line text fields.\nexport class TextField extends Field {\n  render() {\n    let input = document.createElement(\"input\")\n    input.type = \"text\"\n    input.placeholder = this.options.label\n    input.value = this.options.value || \"\"\n    input.autocomplete = \"off\"\n    return input\n  }\n}\n\n\n// ::- A field class for dropdown fields based on a plain `<select>`\n// tag. Expects an option `options`, which should be an array of\n// `{value: string, label: string}` objects, or a function taking a\n// `ProseMirror` instance and returning such an array.\nexport class SelectField extends Field {\n  render() {\n    let select = document.createElement(\"select\")\n    this.options.options.forEach(o => {\n      let opt = select.appendChild(document.createElement(\"option\"))\n      opt.value = o.value\n      opt.selected = o.value == this.options.value\n      opt.label = o.label\n    })\n    return select\n  }\n}\n","import {wrapItem, blockTypeItem, Dropdown, DropdownSubmenu, joinUpItem, liftItem,\n       selectParentNodeItem, undoItem, redoItem, icons, MenuItem} from \"prosemirror-menu\"\nimport {NodeSelection} from \"prosemirror-state\"\nimport {toggleMark} from \"prosemirror-commands\"\nimport {wrapInList} from \"prosemirror-schema-list\"\nimport {TextField, openPrompt} from \"./prompt\"\n\n// Helpers to create specific types of items\n\nfunction canInsert(state, nodeType) {\n  let $from = state.selection.$from\n  for (let d = $from.depth; d >= 0; d--) {\n    let index = $from.index(d)\n    if ($from.node(d).canReplaceWith(index, index, nodeType)) return true\n  }\n  return false\n}\n\nfunction insertImageItem(nodeType) {\n  return new MenuItem({\n    title: \"Insert image\",\n    label: \"Image\",\n    enable(state) { return canInsert(state, nodeType) },\n    run(state, _, view) {\n      let {from, to} = state.selection, attrs = null\n      if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType)\n        attrs = state.selection.node.attrs\n      openPrompt({\n        title: \"Insert image\",\n        fields: {\n          src: new TextField({label: \"Location\", required: true, value: attrs && attrs.src}),\n          title: new TextField({label: \"Title\", value: attrs && attrs.title}),\n          alt: new TextField({label: \"Description\",\n                              value: attrs ? attrs.alt : state.doc.textBetween(from, to, \" \")})\n        },\n        callback(attrs) {\n          view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(attrs)))\n          view.focus()\n        }\n      })\n    }\n  })\n}\n\nfunction cmdItem(cmd, options) {\n  let passedOptions = {\n    label: options.title,\n    run: cmd\n  }\n  for (let prop in options) passedOptions[prop] = options[prop]\n  if ((!options.enable || options.enable === true) && !options.select)\n    passedOptions[options.enable ? \"enable\" : \"select\"] = state => cmd(state)\n\n  return new MenuItem(passedOptions)\n}\n\nfunction markActive(state, type) {\n  let {from, $from, to, empty} = state.selection\n  if (empty) return type.isInSet(state.storedMarks || $from.marks())\n  else return state.doc.rangeHasMark(from, to, type)\n}\n\nfunction markItem(markType, options) {\n  let passedOptions = {\n    active(state) { return markActive(state, markType) },\n    enable: true\n  }\n  for (let prop in options) passedOptions[prop] = options[prop]\n  return cmdItem(toggleMark(markType), passedOptions)\n}\n\nfunction linkItem(markType) {\n  return new MenuItem({\n    title: \"Add or remove link\",\n    icon: icons.link,\n    active(state) { return markActive(state, markType) },\n    enable(state) { return !state.selection.empty },\n    run(state, dispatch, view) {\n      if (markActive(state, markType)) {\n        toggleMark(markType)(state, dispatch)\n        return true\n      }\n      openPrompt({\n        title: \"Create a link\",\n        fields: {\n          href: new TextField({\n            label: \"Link target\",\n            required: true\n          }),\n          title: new TextField({label: \"Title\"})\n        },\n        callback(attrs) {\n          toggleMark(markType, attrs)(view.state, view.dispatch)\n          view.focus()\n        }\n      })\n    }\n  })\n}\n\nfunction wrapListItem(nodeType, options) {\n  return cmdItem(wrapInList(nodeType, options.attrs), options)\n}\n\n// :: (Schema) → Object\n// Given a schema, look for default mark and node types in it and\n// return an object with relevant menu items relating to those marks:\n//\n// **`toggleStrong`**`: MenuItem`\n//   : A menu item to toggle the [strong mark](#schema-basic.StrongMark).\n//\n// **`toggleEm`**`: MenuItem`\n//   : A menu item to toggle the [emphasis mark](#schema-basic.EmMark).\n//\n// **`toggleCode`**`: MenuItem`\n//   : A menu item to toggle the [code font mark](#schema-basic.CodeMark).\n//\n// **`toggleLink`**`: MenuItem`\n//   : A menu item to toggle the [link mark](#schema-basic.LinkMark).\n//\n// **`insertImage`**`: MenuItem`\n//   : A menu item to insert an [image](#schema-basic.Image).\n//\n// **`wrapBulletList`**`: MenuItem`\n//   : A menu item to wrap the selection in a [bullet list](#schema-list.BulletList).\n//\n// **`wrapOrderedList`**`: MenuItem`\n//   : A menu item to wrap the selection in an [ordered list](#schema-list.OrderedList).\n//\n// **`wrapBlockQuote`**`: MenuItem`\n//   : A menu item to wrap the selection in a [block quote](#schema-basic.BlockQuote).\n//\n// **`makeParagraph`**`: MenuItem`\n//   : A menu item to set the current textblock to be a normal\n//     [paragraph](#schema-basic.Paragraph).\n//\n// **`makeCodeBlock`**`: MenuItem`\n//   : A menu item to set the current textblock to be a\n//     [code block](#schema-basic.CodeBlock).\n//\n// **`makeHead[N]`**`: MenuItem`\n//   : Where _N_ is 1 to 6. Menu items to set the current textblock to\n//     be a [heading](#schema-basic.Heading) of level _N_.\n//\n// **`insertHorizontalRule`**`: MenuItem`\n//   : A menu item to insert a horizontal rule.\n//\n// The return value also contains some prefabricated menu elements and\n// menus, that you can use instead of composing your own menu from\n// scratch:\n//\n// **`insertMenu`**`: Dropdown`\n//   : A dropdown containing the `insertImage` and\n//     `insertHorizontalRule` items.\n//\n// **`typeMenu`**`: Dropdown`\n//   : A dropdown containing the items for making the current\n//     textblock a paragraph, code block, or heading.\n//\n// **`fullMenu`**`: [[MenuElement]]`\n//   : An array of arrays of menu elements for use as the full menu\n//     for, for example the [menu bar](https://github.com/prosemirror/prosemirror-menu#user-content-menubar).\nexport function buildMenuItems(schema) {\n  let r = {}, type\n  if (type = schema.marks.strong)\n    r.toggleStrong = markItem(type, {title: \"Toggle strong style\", icon: icons.strong})\n  if (type = schema.marks.em)\n    r.toggleEm = markItem(type, {title: \"Toggle emphasis\", icon: icons.em})\n  if (type = schema.marks.code)\n    r.toggleCode = markItem(type, {title: \"Toggle code font\", icon: icons.code})\n  if (type = schema.marks.link)\n    r.toggleLink = linkItem(type)\n\n  if (type = schema.nodes.image)\n    r.insertImage = insertImageItem(type)\n  if (type = schema.nodes.bullet_list)\n    r.wrapBulletList = wrapListItem(type, {\n      title: \"Wrap in bullet list\",\n      icon: icons.bulletList\n    })\n  if (type = schema.nodes.ordered_list)\n    r.wrapOrderedList = wrapListItem(type, {\n      title: \"Wrap in ordered list\",\n      icon: icons.orderedList\n    })\n  if (type = schema.nodes.blockquote)\n    r.wrapBlockQuote = wrapItem(type, {\n      title: \"Wrap in block quote\",\n      icon: icons.blockquote\n    })\n  if (type = schema.nodes.paragraph)\n    r.makeParagraph = blockTypeItem(type, {\n      title: \"Change to paragraph\",\n      label: \"Plain\"\n    })\n  if (type = schema.nodes.code_block)\n    r.makeCodeBlock = blockTypeItem(type, {\n      title: \"Change to code block\",\n      label: \"Code\"\n    })\n  if (type = schema.nodes.heading)\n    for (let i = 1; i <= 10; i++)\n      r[\"makeHead\" + i] = blockTypeItem(type, {\n        title: \"Change to heading \" + i,\n        label: \"Level \" + i,\n        attrs: {level: i}\n      })\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type\n    r.insertHorizontalRule = new MenuItem({\n      title: \"Insert horizontal rule\",\n      label: \"Horizontal rule\",\n      enable(state) { return canInsert(state, hr) },\n      run(state, dispatch) { dispatch(state.tr.replaceSelectionWith(hr.create())) }\n    })\n  }\n\n  let cut = arr => arr.filter(x => x)\n  r.insertMenu = new Dropdown(cut([r.insertImage, r.insertHorizontalRule]), {label: \"Insert\"})\n  r.typeMenu = new Dropdown(cut([r.makeParagraph, r.makeCodeBlock, r.makeHead1 && new DropdownSubmenu(cut([\n    r.makeHead1, r.makeHead2, r.makeHead3, r.makeHead4, r.makeHead5, r.makeHead6\n  ]), {label: \"Heading\"})]), {label: \"Type...\"})\n\n  r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])]\n  r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList, r.wrapBlockQuote, joinUpItem,\n                      liftItem, selectParentNodeItem])]\n  r.fullMenu = r.inlineMenu.concat([[r.insertMenu, r.typeMenu]], [[undoItem, redoItem]], r.blockMenu)\n\n  return r\n}\n","import {wrapIn, setBlockType, chainCommands, toggleMark, exitCode,\n        joinUp, joinDown, lift, selectParentNode} from \"prosemirror-commands\"\nimport {wrapInList, splitListItem, liftListItem, sinkListItem} from \"prosemirror-schema-list\"\nimport {undo, redo} from \"prosemirror-history\"\nimport {undoInputRule} from \"prosemirror-inputrules\"\n\nconst mac = typeof navigator != \"undefined\" ? /Mac/.test(navigator.platform) : false\n\n// :: (Schema, ?Object) → Object\n// Inspect the given schema looking for marks and nodes from the\n// basic schema, and if found, add key bindings related to them.\n// This will add:\n//\n// * **Mod-b** for toggling [strong](#schema-basic.StrongMark)\n// * **Mod-i** for toggling [emphasis](#schema-basic.EmMark)\n// * **Mod-`** for toggling [code font](#schema-basic.CodeMark)\n// * **Ctrl-Shift-0** for making the current textblock a paragraph\n// * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current\n//   textblock a heading of the corresponding level\n// * **Ctrl-Shift-Backslash** to make the current textblock a code block\n// * **Ctrl-Shift-8** to wrap the selection in an ordered list\n// * **Ctrl-Shift-9** to wrap the selection in a bullet list\n// * **Ctrl->** to wrap the selection in a block quote\n// * **Enter** to split a non-empty textblock in a list item while at\n//   the same time splitting the list item\n// * **Mod-Enter** to insert a hard break\n// * **Mod-_** to insert a horizontal rule\n// * **Backspace** to undo an input rule\n// * **Alt-ArrowUp** to `joinUp`\n// * **Alt-ArrowDown** to `joinDown`\n// * **Mod-BracketLeft** to `lift`\n// * **Escape** to `selectParentNode`\n//\n// You can suppress or map these bindings by passing a `mapKeys`\n// argument, which maps key names (say `\"Mod-B\"` to either `false`, to\n// remove the binding, or a new key name string.\nexport function buildKeymap(schema, mapKeys) {\n  let keys = {}, type\n  function bind(key, cmd) {\n    if (mapKeys) {\n      let mapped = mapKeys[key]\n      if (mapped === false) return\n      if (mapped) key = mapped\n    }\n    keys[key] = cmd\n  }\n\n\n  bind(\"Mod-z\", undo)\n  bind(\"Shift-Mod-z\", redo)\n  bind(\"Backspace\", undoInputRule)\n  if (!mac) bind(\"Mod-y\", redo)\n\n  bind(\"Alt-ArrowUp\", joinUp)\n  bind(\"Alt-ArrowDown\", joinDown)\n  bind(\"Mod-BracketLeft\", lift)\n  bind(\"Escape\", selectParentNode)\n\n  if (type = schema.marks.strong) {\n    bind(\"Mod-b\", toggleMark(type))\n    bind(\"Mod-B\", toggleMark(type))\n  }\n  if (type = schema.marks.em) {\n    bind(\"Mod-i\", toggleMark(type))\n    bind(\"Mod-I\", toggleMark(type))\n  }\n  if (type = schema.marks.code)\n    bind(\"Mod-`\", toggleMark(type))\n\n  if (type = schema.nodes.bullet_list)\n    bind(\"Shift-Ctrl-8\", wrapInList(type))\n  if (type = schema.nodes.ordered_list)\n    bind(\"Shift-Ctrl-9\", wrapInList(type))\n  if (type = schema.nodes.blockquote)\n    bind(\"Ctrl->\", wrapIn(type))\n  if (type = schema.nodes.hard_break) {\n    let br = type, cmd = chainCommands(exitCode, (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView())\n      return true\n    })\n    bind(\"Mod-Enter\", cmd)\n    bind(\"Shift-Enter\", cmd)\n    if (mac) bind(\"Ctrl-Enter\", cmd)\n  }\n  if (type = schema.nodes.list_item) {\n    bind(\"Enter\", splitListItem(type))\n    bind(\"Mod-[\", liftListItem(type))\n    bind(\"Mod-]\", sinkListItem(type))\n  }\n  if (type = schema.nodes.paragraph)\n    bind(\"Shift-Ctrl-0\", setBlockType(type))\n  if (type = schema.nodes.code_block)\n    bind(\"Shift-Ctrl-\\\\\", setBlockType(type))\n  if (type = schema.nodes.heading)\n    for (let i = 1; i <= 6; i++) bind(\"Shift-Ctrl-\" + i, setBlockType(type, {level: i}))\n  if (type = schema.nodes.horizontal_rule) {\n    let hr = type\n    bind(\"Mod-_\", (state, dispatch) => {\n      dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView())\n      return true\n    })\n  }\n\n  return keys\n}\n","import {inputRules, wrappingInputRule, textblockTypeInputRule,\n        smartQuotes, emDash, ellipsis} from \"prosemirror-inputrules\"\n\n// : (NodeType) → InputRule\n// Given a blockquote node type, returns an input rule that turns `\"> \"`\n// at the start of a textblock into a blockquote.\nexport function blockQuoteRule(nodeType) {\n  return wrappingInputRule(/^\\s*>\\s$/, nodeType)\n}\n\n// : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a number\n// followed by a dot at the start of a textblock into an ordered list.\nexport function orderedListRule(nodeType) {\n  return wrappingInputRule(/^(\\d+)\\.\\s$/, nodeType, match => ({order: +match[1]}),\n                           (match, node) => node.childCount + node.attrs.order == +match[1])\n}\n\n// : (NodeType) → InputRule\n// Given a list node type, returns an input rule that turns a bullet\n// (dash, plush, or asterisk) at the start of a textblock into a\n// bullet list.\nexport function bulletListRule(nodeType) {\n  return wrappingInputRule(/^\\s*([-+*])\\s$/, nodeType)\n}\n\n// : (NodeType) → InputRule\n// Given a code block node type, returns an input rule that turns a\n// textblock starting with three backticks into a code block.\nexport function codeBlockRule(nodeType) {\n  return textblockTypeInputRule(/^```$/, nodeType)\n}\n\n// : (NodeType, number) → InputRule\n// Given a node type and a maximum level, creates an input rule that\n// turns up to that number of `#` characters followed by a space at\n// the start of a textblock into a heading whose level corresponds to\n// the number of `#` signs.\nexport function headingRule(nodeType, maxLevel) {\n  return textblockTypeInputRule(new RegExp(\"^(#{1,\" + maxLevel + \"})\\\\s$\"),\n                                nodeType, match => ({level: match[1].length}))\n}\n\n// : (Schema) → Plugin\n// A set of input rules for creating the basic block quotes, lists,\n// code blocks, and heading.\nexport function buildInputRules(schema) {\n  let rules = smartQuotes.concat(ellipsis, emDash), type\n  if (type = schema.nodes.blockquote) rules.push(blockQuoteRule(type))\n  if (type = schema.nodes.ordered_list) rules.push(orderedListRule(type))\n  if (type = schema.nodes.bullet_list) rules.push(bulletListRule(type))\n  if (type = schema.nodes.code_block) rules.push(codeBlockRule(type))\n  if (type = schema.nodes.heading) rules.push(headingRule(type, 6))\n  return inputRules({rules})\n}\n","import {keymap} from \"prosemirror-keymap\"\nimport {history} from \"prosemirror-history\"\nimport {baseKeymap} from \"prosemirror-commands\"\nimport {Plugin} from \"prosemirror-state\"\nimport {dropCursor} from \"prosemirror-dropcursor\"\nimport {gapCursor} from \"prosemirror-gapcursor\"\nimport {menuBar} from \"prosemirror-menu\"\n\nimport {buildMenuItems} from \"./menu\"\nimport {buildKeymap} from \"./keymap\"\nimport {buildInputRules} from \"./inputrules\"\n\nexport {buildMenuItems, buildKeymap, buildInputRules}\n\n// !! This module exports helper functions for deriving a set of basic\n// menu items, input rules, or key bindings from a schema. These\n// values need to know about the schema for two reasons—they need\n// access to specific instances of node and mark types, and they need\n// to know which of the node and mark types that they know about are\n// actually present in the schema.\n//\n// The `exampleSetup` plugin ties these together into a plugin that\n// will automatically enable this basic functionality in an editor.\n\n// :: (Object) → [Plugin]\n// A convenience plugin that bundles together a simple menu with basic\n// key bindings, input rules, and styling for the example schema.\n// Probably only useful for quickly setting up a passable\n// editor—you'll need more control over your settings in most\n// real-world situations.\n//\n//   options::- The following options are recognized:\n//\n//     schema:: Schema\n//     The schema to generate key bindings and menu items for.\n//\n//     mapKeys:: ?Object\n//     Can be used to [adjust](#example-setup.buildKeymap) the key bindings created.\n//\n//     menuBar:: ?bool\n//     Set to false to disable the menu bar.\n//\n//     history:: ?bool\n//     Set to false to disable the history plugin.\n//\n//     floatingMenu:: ?bool\n//     Set to false to make the menu bar non-floating.\n//\n//     menuContent:: [[MenuItem]]\n//     Can be used to override the menu content.\nexport function exampleSetup(options) {\n  let plugins = [\n    buildInputRules(options.schema),\n    keymap(buildKeymap(options.schema, options.mapKeys)),\n    keymap(baseKeymap),\n    dropCursor(),\n    gapCursor()\n  ]\n  if (options.menuBar !== false)\n    plugins.push(menuBar({floating: options.floatingMenu !== false,\n                          content: options.menuContent || buildMenuItems(options.schema).fullMenu}))\n  if (options.history !== false)\n    plugins.push(history())\n\n  return plugins.concat(new Plugin({\n    props: {\n      attributes: {class: \"ProseMirror-example-setup-style\"}\n    }\n  }))\n}\n"],"names":["const","let"],"mappings":";;;;;;;;;;AAAAA,IAAM,MAAM,GAAG,qBAAoB;;AAEnC,AAAO,SAAS,UAAU,CAAC,OAAO,EAAE;EAClCC,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAC;EACtE,OAAO,CAAC,SAAS,GAAG,OAAM;;EAE1BA,IAAI,YAAY,aAAG,GAAE,EAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAE,KAAK,KAAE,GAAE;EACpE,UAAU,aAAI,SAAG,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,IAAC,EAAE,EAAE,EAAC;EACxEA,IAAI,KAAK,eAAM;IACb,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,YAAY,EAAC;IACrD,IAAI,OAAO,CAAC,UAAU,IAAE,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,IAAC;IAChE;;EAEDA,IAAI,SAAS,GAAG,GAAE;EAClB,KAAKA,IAAI,IAAI,IAAI,OAAO,CAAC,MAAM,IAAE,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAC;;EAE9EA,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAC;EACnD,YAAY,CAAC,IAAI,GAAG,SAAQ;EAC5B,YAAY,CAAC,SAAS,GAAG,MAAM,GAAG,UAAS;EAC3C,YAAY,CAAC,WAAW,GAAG,KAAI;EAC/BA,IAAI,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAC;EACnD,YAAY,CAAC,IAAI,GAAG,SAAQ;EAC5B,YAAY,CAAC,SAAS,GAAG,MAAM,GAAG,UAAS;EAC3C,YAAY,CAAC,WAAW,GAAG,SAAQ;EACnC,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,EAAC;;EAE7CA,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAAC;EAC9D,IAAI,OAAO,CAAC,KAAK,IAAE,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,QAAK;EAC7F,SAAS,CAAC,OAAO,WAAC,OAAM;IACtB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,EAAC;GACnE,EAAC;EACFA,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAC;EAC7D,OAAO,CAAC,SAAS,GAAG,MAAM,GAAG,WAAU;EACvC,OAAO,CAAC,WAAW,CAAC,YAAY,EAAC;EACjC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,EAAC;EACjD,OAAO,CAAC,WAAW,CAAC,YAAY,EAAC;;EAEjCA,IAAI,GAAG,GAAG,OAAO,CAAC,qBAAqB,GAAE;EACzC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,KAAI;EAClE,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,CAAC,KAAK,IAAI,CAAC,IAAI,KAAI;;EAEjEA,IAAI,MAAM,eAAM;IACdA,IAAI,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAC;IACjD,IAAI,MAAM,EAAE;MACV,KAAK,GAAE;MACP,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAC;KACzB;IACF;;EAED,IAAI,CAAC,gBAAgB,CAAC,QAAQ,YAAE,GAAE;IAChC,CAAC,CAAC,cAAc,GAAE;IAClB,MAAM,GAAE;GACT,EAAC;;EAEF,IAAI,CAAC,gBAAgB,CAAC,SAAS,YAAE,GAAE;IACjC,IAAI,CAAC,CAAC,OAAO,IAAI,EAAE,EAAE;MACnB,CAAC,CAAC,cAAc,GAAE;MAClB,KAAK,GAAE;KACR,MAAM,IAAI,CAAC,CAAC,OAAO,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE;MACrE,CAAC,CAAC,cAAc,GAAE;MAClB,MAAM,GAAE;KACT,MAAM,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE;MACzB,MAAM,CAAC,UAAU,aAAI;QACnB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAE,KAAK,KAAE;OACvD,EAAE,GAAG,EAAC;KACR;GACF,EAAC;;EAEFA,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAC;EAC5B,IAAI,KAAK,IAAE,KAAK,CAAC,KAAK,KAAE;CACzB;;AAED,SAAS,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE;EACpCA,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAC;EACvC,KAAKA,IAAI,IAAI,IAAI,MAAM,EAAE;IACvBA,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,CAAC,EAAE,EAAC;IAC9CA,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAC;IACxD,IAAI,GAAG,EAAE;MACP,aAAa,CAAC,GAAG,EAAE,GAAG,EAAC;MACvB,OAAO,IAAI;KACZ;IACD,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAC;GAClC;EACD,OAAO,MAAM;CACd;;AAED,SAAS,aAAa,CAAC,GAAG,EAAE,OAAO,EAAE;;EAEnCA,IAAI,MAAM,GAAG,GAAG,CAAC,WAAU;EAC3BA,IAAI,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAC;EAC3D,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,WAAW,GAAG,CAAC,IAAI,KAAI;EAC9D,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,IAAI,KAAI;EAC1C,GAAG,CAAC,SAAS,GAAG,sBAAqB;EACrC,GAAG,CAAC,WAAW,GAAG,QAAO;EACzB,UAAU,aAAI,SAAG,MAAM,CAAC,WAAW,CAAC,GAAG,IAAC,EAAE,IAAI,EAAC;CAChD;;;AAGD,AAAO,IAAM,KAAK,GAiBhB,cAAW,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,OAAO,GAAG,QAAO,GAAE;;;;;;;AAOjD,gBAAE,sBAAK,GAAG,EAAE,EAAE,OAAO,GAAG,CAAC,KAAK,GAAE;;;;AAIhC,gBAAE,sCAAa,MAAM,EAAE,GAAE;;AAEzB,gBAAE,8BAAS,KAAK,EAAE;EAChB,IAAM,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ;IACnC,EAAE,OAAO,kBAAgB;EAC3B,OAAS,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EAC3F;;AAEH,gBAAE,wBAAM,KAAK,EAAE;EACX,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK;CAC9D,CACF;;;AAGD,AAAO,IAAM,SAAS;;;;;;;;;sBACpB,4BAAS;IACPA,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,EAAC;IAC3C,KAAK,CAAC,IAAI,GAAG,OAAM;IACnB,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAK;IACtC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,GAAE;IACtC,KAAK,CAAC,YAAY,GAAG,MAAK;IAC1B,OAAO,KAAK;GACb;;;EAR4B,QAS9B;;;;AC5ID,SAAS,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE;EAClCA,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,MAAK;EACjC,KAAKA,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;IACrCA,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAC;IAC1B,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAE,OAAO,MAAI;GACtE;EACD,OAAO,KAAK;CACb;;AAED,SAAS,eAAe,CAAC,QAAQ,EAAE;EACjC,OAAO,IAAI,QAAQ,CAAC;IAClB,KAAK,EAAE,cAAc;IACrB,KAAK,EAAE,OAAO;IACd,uBAAM,CAAC,KAAK,EAAE,EAAE,OAAO,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;IACnD,iBAAG,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE;MAClB,OAAc,GAAG,KAAK,CAAC;MAAlB;MAAM;MAAqB,IAAE,KAAK,GAAG,KAAI;MAC9C,IAAI,KAAK,CAAC,SAAS,YAAY,aAAa,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ;UACnF,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,QAAK;MACpC,UAAU,CAAC;QACT,KAAK,EAAE,cAAc;QACrB,MAAM,EAAE;UACN,GAAG,EAAE,IAAI,SAAS,CAAC,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;UAClF,KAAK,EAAE,IAAI,SAAS,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;UACnE,GAAG,EAAE,IAAI,SAAS,CAAC,CAAC,KAAK,EAAE,aAAa;8BACpB,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;SACtF;QACD,2BAAQ,CAAC,KAAK,EAAE;UACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,oBAAoB,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAC;UAChF,IAAI,CAAC,KAAK,GAAE;SACb;OACF,EAAC;KACH;GACF,CAAC;CACH;;AAED,SAAS,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE;EAC7BA,IAAI,aAAa,GAAG;IAClB,KAAK,EAAE,OAAO,CAAC,KAAK;IACpB,GAAG,EAAE,GAAG;IACT;EACD,KAAKA,IAAI,IAAI,IAAI,OAAO,IAAE,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,IAAC;EAC7D,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM;MACjE,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC,aAAG,OAAM,SAAG,GAAG,CAAC,KAAK,OAAC;;EAE3E,OAAO,IAAI,QAAQ,CAAC,aAAa,CAAC;CACnC;;AAED,SAAS,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE;EAC/B,OAA4B,GAAG,KAAK,CAAC;EAAhC;EAAM;EAAO;EAAI,sBAAwB;EAC9C,IAAI,KAAK,IAAE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,KAAK,EAAE,GAAC;SAC7D,OAAO,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,GAAC;CACnD;;AAED,SAAS,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE;EACnCA,IAAI,aAAa,GAAG;IAClB,uBAAM,CAAC,KAAK,EAAE,EAAE,OAAO,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;IACpD,MAAM,EAAE,IAAI;IACb;EACD,KAAKA,IAAI,IAAI,IAAI,OAAO,IAAE,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,IAAC;EAC7D,OAAO,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC;CACpD;;AAED,SAAS,QAAQ,CAAC,QAAQ,EAAE;EAC1B,OAAO,IAAI,QAAQ,CAAC;IAClB,KAAK,EAAE,oBAAoB;IAC3B,IAAI,EAAE,KAAK,CAAC,IAAI;IAChB,uBAAM,CAAC,KAAK,EAAE,EAAE,OAAO,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;IACpD,uBAAM,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE;IAC/C,iBAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;MACzB,IAAI,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;QAC/B,UAAU,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAC;QACrC,OAAO,IAAI;OACZ;MACD,UAAU,CAAC;QACT,KAAK,EAAE,eAAe;QACtB,MAAM,EAAE;UACN,IAAI,EAAE,IAAI,SAAS,CAAC;YAClB,KAAK,EAAE,aAAa;YACpB,QAAQ,EAAE,IAAI;WACf,CAAC;UACF,KAAK,EAAE,IAAI,SAAS,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACvC;QACD,2BAAQ,CAAC,KAAK,EAAE;UACd,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAC;UACtD,IAAI,CAAC,KAAK,GAAE;SACb;OACF,EAAC;KACH;GACF,CAAC;CACH;;AAED,SAAS,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE;EACvC,OAAO,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC;CAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DD,AAAO,SAAS,cAAc,CAAC,MAAM,EAAE;EACrCA,IAAI,CAAC,GAAG,EAAE,EAAE,KAAI;EAChB,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM;MAC5B,CAAC,CAAC,YAAY,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,qBAAqB,EAAE,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAC;EACrF,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE;MACxB,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,IAAC;EACzE,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI;MAC1B,CAAC,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAC;EAC9E,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI;MAC1B,CAAC,CAAC,UAAU,GAAG,QAAQ,CAAC,IAAI,IAAC;;EAE/B,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK;MAC3B,CAAC,CAAC,WAAW,GAAG,eAAe,CAAC,IAAI,IAAC;EACvC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW;MACjC,CAAC,CAAC,cAAc,GAAG,YAAY,CAAC,IAAI,EAAE;MACpC,KAAK,EAAE,qBAAqB;MAC5B,IAAI,EAAE,KAAK,CAAC,UAAU;KACvB,IAAC;EACJ,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY;MAClC,CAAC,CAAC,eAAe,GAAG,YAAY,CAAC,IAAI,EAAE;MACrC,KAAK,EAAE,sBAAsB;MAC7B,IAAI,EAAE,KAAK,CAAC,WAAW;KACxB,IAAC;EACJ,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU;MAChC,CAAC,CAAC,cAAc,GAAG,QAAQ,CAAC,IAAI,EAAE;MAChC,KAAK,EAAE,qBAAqB;MAC5B,IAAI,EAAE,KAAK,CAAC,UAAU;KACvB,IAAC;EACJ,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS;MAC/B,CAAC,CAAC,aAAa,GAAG,aAAa,CAAC,IAAI,EAAE;MACpC,KAAK,EAAE,qBAAqB;MAC5B,KAAK,EAAE,OAAO;KACf,IAAC;EACJ,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU;MAChC,CAAC,CAAC,aAAa,GAAG,aAAa,CAAC,IAAI,EAAE;MACpC,KAAK,EAAE,sBAAsB;MAC7B,KAAK,EAAE,MAAM;KACd,IAAC;EACJ,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO;MAC7B,KAAKA,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;QAC1B,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC,IAAI,EAAE;QACtC,KAAK,EAAE,oBAAoB,GAAG,CAAC;QAC/B,KAAK,EAAE,QAAQ,GAAG,CAAC;QACnB,KAAK,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;OAClB,MAAC;EACN,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE;IACvCA,IAAI,EAAE,GAAG,KAAI;IACb,CAAC,CAAC,oBAAoB,GAAG,IAAI,QAAQ,CAAC;MACpC,KAAK,EAAE,wBAAwB;MAC/B,KAAK,EAAE,iBAAiB;MACxB,uBAAM,CAAC,KAAK,EAAE,EAAE,OAAO,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;MAC7C,iBAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAC,EAAE;KAC9E,EAAC;GACH;;EAEDA,IAAI,GAAG,aAAG,KAAI,SAAG,GAAG,CAAC,MAAM,WAAC,GAAE,SAAG,IAAC,KAAC;EACnC,CAAC,CAAC,UAAU,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAC;EAC5F,CAAC,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,eAAe,CAAC,GAAG,CAAC;IACtG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS;GAC7E,CAAC,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC,EAAC;;EAE9C,CAAC,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,EAAC;EAC9E,CAAC,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,cAAc,EAAE,UAAU;sBACjE,QAAQ,EAAE,oBAAoB,CAAC,CAAC,EAAC;EACrD,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,SAAS,EAAC;;EAEnG,OAAO,CAAC;CACT;;AC/NDD,IAAM,GAAG,GAAG,OAAO,SAAS,IAAI,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,MAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BpF,AAAO,SAAS,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE;EAC3CC,IAAI,IAAI,GAAG,EAAE,EAAE,KAAI;EACnB,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE;IACtB,IAAI,OAAO,EAAE;MACXA,IAAI,MAAM,GAAG,OAAO,CAAC,GAAG,EAAC;MACzB,IAAI,MAAM,KAAK,KAAK,IAAE,QAAM;MAC5B,IAAI,MAAM,IAAE,GAAG,GAAG,SAAM;KACzB;IACD,IAAI,CAAC,GAAG,CAAC,GAAG,IAAG;GAChB;;;EAGD,IAAI,CAAC,OAAO,EAAE,IAAI,EAAC;EACnB,IAAI,CAAC,aAAa,EAAE,IAAI,EAAC;EACzB,IAAI,CAAC,WAAW,EAAE,aAAa,EAAC;EAChC,IAAI,CAAC,GAAG,IAAE,IAAI,CAAC,OAAO,EAAE,IAAI,IAAC;;EAE7B,IAAI,CAAC,aAAa,EAAE,MAAM,EAAC;EAC3B,IAAI,CAAC,eAAe,EAAE,QAAQ,EAAC;EAC/B,IAAI,CAAC,iBAAiB,EAAE,IAAI,EAAC;EAC7B,IAAI,CAAC,QAAQ,EAAE,gBAAgB,EAAC;;EAEhC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;IAC9B,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,EAAC;IAC/B,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,EAAC;GAChC;EACD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE;IAC1B,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,EAAC;IAC/B,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,EAAC;GAChC;EACD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI;MAC1B,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC,IAAC;;EAEjC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW;MACjC,IAAI,CAAC,cAAc,EAAE,UAAU,CAAC,IAAI,CAAC,IAAC;EACxC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY;MAClC,IAAI,CAAC,cAAc,EAAE,UAAU,CAAC,IAAI,CAAC,IAAC;EACxC,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU;MAChC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAC;EAC9B,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE;IAClCA,IAAI,EAAE,GAAG,IAAI,EAAE,GAAG,GAAG,aAAa,CAAC,QAAQ,YAAG,KAAK,EAAE,QAAQ,EAAE;MAC7D,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,cAAc,EAAE,EAAC;MACrE,OAAO,IAAI;KACZ,EAAC;IACF,IAAI,CAAC,WAAW,EAAE,GAAG,EAAC;IACtB,IAAI,CAAC,aAAa,EAAE,GAAG,EAAC;IACxB,IAAI,GAAG,IAAE,IAAI,CAAC,YAAY,EAAE,GAAG,IAAC;GACjC;EACD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE;IACjC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,IAAI,CAAC,EAAC;IAClC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,EAAC;IACjC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,EAAC;GAClC;EACD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS;MAC/B,IAAI,CAAC,cAAc,EAAE,YAAY,CAAC,IAAI,CAAC,IAAC;EAC1C,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU;MAChC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,IAAI,CAAC,IAAC;EAC3C,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO;MAC7B,KAAKA,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAE,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,MAAC;EACtF,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE;IACvCA,IAAI,EAAE,GAAG,KAAI;IACb,IAAI,CAAC,OAAO,YAAG,KAAK,EAAE,QAAQ,EAAE;MAC9B,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,cAAc,EAAE,EAAC;MACrE,OAAO,IAAI;KACZ,EAAC;GACH;;EAED,OAAO,IAAI;CACZ;;;;;AClGD,AAAO,SAAS,cAAc,CAAC,QAAQ,EAAE;EACvC,OAAO,iBAAiB,CAAC,UAAU,EAAE,QAAQ,CAAC;CAC/C;;;;;AAKD,AAAO,SAAS,eAAe,CAAC,QAAQ,EAAE;EACxC,OAAO,iBAAiB,CAAC,aAAa,EAAE,QAAQ,YAAE,OAAM,UAAI,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAC;qCACrD,KAAK,EAAE,IAAI,EAAE,SAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,IAAC,CAAC;CAC3F;;;;;;AAMD,AAAO,SAAS,cAAc,CAAC,QAAQ,EAAE;EACvC,OAAO,iBAAiB,CAAC,gBAAgB,EAAE,QAAQ,CAAC;CACrD;;;;;AAKD,AAAO,SAAS,aAAa,CAAC,QAAQ,EAAE;EACtC,OAAO,sBAAsB,CAAC,OAAO,EAAE,QAAQ,CAAC;CACjD;;;;;;;AAOD,AAAO,SAAS,WAAW,CAAC,QAAQ,EAAE,QAAQ,EAAE;EAC9C,OAAO,sBAAsB,CAAC,IAAI,MAAM,CAAC,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC;gCAC1C,QAAQ,YAAE,OAAM,UAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAC,CAAC;CAC7E;;;;;AAKD,AAAO,SAAS,eAAe,CAAC,MAAM,EAAE;EACtCA,IAAI,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,KAAI;EACtD,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,IAAE,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAC;EACpE,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY,IAAE,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAC;EACvE,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,IAAE,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAC;EACrE,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,IAAE,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAC;EACnE,IAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,IAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,IAAC;EACjE,OAAO,UAAU,CAAC,QAAC,KAAK,CAAC,CAAC;CAC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJD,AAAO,SAAS,YAAY,CAAC,OAAO,EAAE;EACpCA,IAAI,OAAO,GAAG;IACZ,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC;IAC/B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IACpD,MAAM,CAAC,UAAU,CAAC;IAClB,UAAU,EAAE;IACZ,SAAS,EAAE;IACZ;EACD,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK;MAC3B,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,YAAY,KAAK,KAAK;0BACxC,OAAO,EAAE,OAAO,CAAC,WAAW,IAAI,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAC;EAClG,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK;MAC3B,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAC;;EAEzB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC;IAC/B,KAAK,EAAE;MACL,UAAU,EAAE,CAAC,KAAK,EAAE,iCAAiC,CAAC;KACvD;GACF,CAAC,CAAC;CACJ;;;;"}